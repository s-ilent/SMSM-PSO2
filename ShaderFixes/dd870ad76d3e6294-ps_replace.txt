// Used for some Mags.
// ---- Created with 3Dmigoto v1.3.16 on Fri Mar 05 21:53:44 2021

cbuffer _Globals : register(b0)
{
  float4 u_BlendRate : packoffset(c0);
  float4 u_ColorFilter : packoffset(c1);
  float4 u_Ambient : packoffset(c2);
}

cbuffer EnvironmentPS : register(b1)
{
  float u_Deltatime : packoffset(c0);
  float u_InvDeltatime : packoffset(c0.y);
  float u_TonemapExposure : packoffset(c0.z);
  float u_Time : packoffset(c0.w);
  float4 u_Light_Parallel_DirectionPS : packoffset(c1);
  float4 u_Light_Parallel_ColorPS : packoffset(c2);
  float4 u_Light_Env_ColorPS : packoffset(c3);
  float4 u_Fog_ColorPS : packoffset(c4);
  float4 u_HeightFogColor : packoffset(c5);
  float4 u_Fog_Parameters : packoffset(c6);
  float4 u_HeightFogParam : packoffset(c7);
  float u_WeatherOut : packoffset(c8);
  float u_NightRatio : packoffset(c8.y);
  float2 u_ScreenResolution : packoffset(c8.z);
  float u_EdgeLightRate : packoffset(c9);
  float u_ZNear : packoffset(c9.y);
  float u_ZNearFar : packoffset(c9.z);
  float u_ZRange : packoffset(c9.w);
  float4 u_ScreenRect : packoffset(c10);
  float4 u_ShadowParam : packoffset(c11);
  float3 u_EnvMap_Position : packoffset(c12);
  float u_EnvMap_Radius : packoffset(c12.w);
  float3 u_Camera_Position : packoffset(c13);
  float u_ZBias : packoffset(c13.w);
  float4x4 u_InvViewProjectionMatrix : packoffset(c14);
  float4x4 u_ViewProjectionMatrix : packoffset(c18);
  float4x4 u_ProjectionMatrix : packoffset(c22);
  float4x4 u_ViewMatrix : packoffset(c26);
  float2 u_InvScreenResolution : packoffset(c30);
  float2 u_AtmosphereHeight : packoffset(c30.z);
  float4 u_SkyColorPS : packoffset(c31);
  float u_FogLimit : packoffset(c32);
  float u_FogHeightDecayIntensity : packoffset(c32.y);
  float u_ModelReyleighIntensity : packoffset(c32.z);
  uint u_RenderFlag : packoffset(c32.w);
  float4 u_OverrideMaterial : packoffset(c33);
  float u_WaterHeight : packoffset(c34);
  float u_InstanceFadeOffset : packoffset(c34.y);
  float u_IndirectDiffuseIntensity : packoffset(c34.z);
  float u_IndirectSpecularIntensity : packoffset(c34.w);
  float u_IndirectSkylightIntensity : packoffset(c35);
  float u_EnhanceBrightnessScale : packoffset(c35.y);
  float u_EnhanceBrightnessPower : packoffset(c35.z);
  float u_MieNearConstraint : packoffset(c35.w);
  float u_ModelReyleighNearConstraint : packoffset(c36);
  float u_EnlightenAttenStart : packoffset(c36.y);
  float u_EnlightenAttenEnd : packoffset(c36.z);
  float u_FarTextureRatioOffset : packoffset(c36.w);
  float3 u_Protagonist_Position : packoffset(c37);
  float u_Dummy : packoffset(c37.w);
  float4 u_SeaScatteringRate : packoffset(c38);
  float u_DebugHair : packoffset(c39);
  float u_CharacterColorRate : packoffset(c39.y);
  float u_CharacterColorPow : packoffset(c39.z);
  float u_CloudCoverage : packoffset(c39.w);
  float2 u_ScreenRate : packoffset(c40);
}

cbuffer MaterialPS : register(b3)
{
  float4 u_MatDiffuse : packoffset(c0);
  float3 u_MatEmission : packoffset(c1);
  float u_TexBlendOut1 : packoffset(c1.w);
  float u_TexBlendOut2 : packoffset(c2);
  float u_TexBlendOut3 : packoffset(c2.y);
  float u_TexBlendOut4 : packoffset(c2.z);
  float u_MatSpecular : packoffset(c2.w);
}

cbuffer ObjectCustomPS : register(b5)
{
  float u_ObjEmisCoef : packoffset(c0);
  float u_SkinWet : packoffset(c0.y);
  float u_RainWet : packoffset(c0.z);
  float u_EyeAddSpecPow : packoffset(c0.w);
  float u_DecalEmission : packoffset(c1);
  float u_ColorConvertRate : packoffset(c1.y);
  float u_obj_padding2 : packoffset(c1.z);
  float u_obj_padding3 : packoffset(c1.w);
  float4 u_ObjBlendColor1 : packoffset(c2);
  float4 u_ObjBlendColor2 : packoffset(c3);
  float4 u_ObjBlendColor3 : packoffset(c4);
  float4 u_ObjBlendColor4 : packoffset(c5);
  float4 u_ObjBlendColor5 : packoffset(c6);
  float4 u_ObjBlendColor6 : packoffset(c7);
  float4 u_FadeTextureRate : packoffset(c8);
}

SamplerState ss_DiffuseTex1_s : register(s0);
SamplerState ss_SpecMaskTex1_s : register(s1);
SamplerState ss_SpecMaskTex2_s : register(s2);
SamplerState ss_NormalTex1_s : register(s3);
Texture2D<float4> s_DiffuseTex1 : register(t0);
Texture2D<float4> s_SpecMaskTex1 : register(t1);
Texture2D<float4> s_SpecMaskTex2 : register(t2);
Texture2D<float4> s_NormalTex1 : register(t3);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[16];
  r0.xyz = s_NormalTex1.Sample(ss_NormalTex1_s, v5.xy).xyz;
  r1.xyz = s_DiffuseTex1.Sample(ss_DiffuseTex1_s, v5.xy).xyz;
  r2.xy = s_SpecMaskTex1.Sample(ss_SpecMaskTex1_s, v5.xy).xz;

    // Patch to fix Mag emission, which wasn't being read.
    r3.xyzw = s_SpecMaskTex2.Sample(ss_SpecMaskTex2_s, v5.xy).xyzw;
    float emission2 = r3.w;
    
  r0.w = cmp(u_ColorFilter.w < 0.999000013);
  if (r0.w != 0) {
    x0[0].x = 0.0588235296;
    x0[1].x = 0.529411793;
    x0[2].x = 0.176470593;
    x0[3].x = 0.647058845;
    x0[4].x = 0.764705896;
    x0[5].x = 0.294117659;
    x0[6].x = 0.882352948;
    x0[7].x = 0.411764711;
    x0[8].x = 0.235294119;
    x0[9].x = 0.70588237;
    x0[10].x = 0.117647059;
    x0[11].x = 0.588235319;
    x0[12].x = 0.941176474;
    x0[13].x = 0.470588237;
    x0[14].x = 0.823529422;
    x0[15].x = 0.352941185;
    r2.zw = (uint2)v0.xy;
    bitmask.w = ((~(-1 << 2)) << 2) & 0xffffffff;  r0.w = (((uint)r2.z << 2) & bitmask.w) | ((uint)0 & ~bitmask.w);
    bitmask.w = ((~(-1 << 2)) << 0) & 0xffffffff;  r0.w = (((uint)r2.w << 0) & bitmask.w) | ((uint)r0.w & ~bitmask.w);
    r0.w = x0[r0.w+0].x;
    r0.w = u_ColorFilter.w + -r0.w;
    r1.w = u_BlendRate.y * -2 + 1;
    r0.w = r1.w * r0.w;
    r0.w = cmp(r0.w < 0);
    if (r0.w != 0) discard;
  }
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(2.20000005,2.20000005,2.20000005) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r4.xyz = u_ObjBlendColor3.xyz + -r1.xyz;
  r1.xyz = r3.zzz * r4.xyz + r1.xyz;
  r4.xyz = u_ObjBlendColor2.xyz + -r1.xyz;
  r1.xyz = r3.yyy * r4.xyz + r1.xyz;
  r3.yzw = u_ObjBlendColor1.xyz + -r1.xyz;
  r1.xyz = r3.xxx * r3.yzw + r1.xyz;
  r3.xyz = u_ColorFilter.xyz * u_MatDiffuse.xyz;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = float3(0.600000024,0.600000024,0.600000024) * r1.xyz;
  r0.xyz = float3(-0.5,-0.5,-0.5) + r0.xyz;
  r0.xyz = r0.xyz + r0.xyz;
  r3.xyz = v4.xyz * r0.yyy;
  r0.xyw = r0.xxx * v3.xyz + r3.xyz;
  r0.xyz = r0.zzz * v2.xyz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = max(u_MatEmission.x, r2.y);
    // Patch to fix Mag emission, which wasn't being read.
      r0.w = max(r0.w, emission2);
  r2.yzw = r1.xyz * r0.www;
  r2.yzw = u_ObjEmisCoef * r2.yzw;
  r1.w = u_MatSpecular * r2.x;
  r0.w = 1 + -r0.w;
  r1.w = r1.w * r0.w;
  r1.w = -r1.w * 0.5 + 0.75;
  r3.xyz = r1.xyz * r0.www;
  r2.x = -1 + u_OverrideMaterial.y;
  r2.x = u_OverrideMaterial.x * r2.x + 1;
  r3.w = u_OverrideMaterial.z + -r1.w;
  o1.y = u_OverrideMaterial.x * r3.w + r1.w;
  r2.yzw = r2.yzw / u_TonemapExposure;
  r2.yzw = u_EnhanceBrightnessScale * r2.yzw;
  r2.yzw = u_TonemapExposure * r2.yzw;
  r2.yzw = log2(r2.yzw);
  r2.yzw = u_EnhanceBrightnessPower * r2.yzw;
  r2.yzw = exp2(r2.yzw);
  r2.yzw = r2.yzw / u_TonemapExposure;
  r1.w = r2.y + r2.z;
  r1.w = r1.w + r2.w;
  r1.w = cmp(r1.w >= 9.99999997e-007);
  r1.w = r1.w ? 1.000000 : 0;
  r2.yzw = r1.www * r2.yzw;
  r1.w = dot(r3.xyz, float3(0.298999995,0.587000012,0.114));
  r1.w = 9.99999997e-007 + r1.w;
  r3.w = -2.88539004 * r1.w;
  r3.w = exp2(r3.w);
  r3.w = 1 + -r3.w;
  r3.w = log2(r3.w);
  r3.w = 1.5 * r3.w;
  r3.w = exp2(r3.w);
  r4.xyz = r3.xyz * r3.www;
  r4.xyz = r4.xyz / r1.www;
  r1.xyz = -r1.xyz * r0.www + r4.xyz;
  r1.xyz = r2.xxx * r1.xyz + r3.xyz;
  o0.xyz = saturate(float3(0.5,0.5,0.5) * r1.xyz);
  o2.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.xyz = rsqrt(r2.yzw);
  o3.xyz = float3(1,1,1) / r0.xyz;
  o0.w = u_Ambient.w;
  o1.zw = float2(0.68235296,1);
  o1.x = r2.x;
  o2.w = 0;
  o3.w = 0;
  o4.xy = v6.xy;
  o4.zw = float2(0,0);
  return;
}

void main_orig(
  float4 v0 : SV_Position0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  float4 v3 : TEXCOORD2,
  float4 v4 : TEXCOORD3,
  float4 v5 : TEXCOORD4,
  float4 v6 : TEXCOORD5,
  out float4 o0 : SV_Target0,
  out float4 o1 : SV_Target1,
  out float4 o2 : SV_Target2,
  out float4 o3 : SV_Target3,
  out float4 o4 : SV_Target4)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 x0[16];
  r0.xyz = s_NormalTex1.Sample(ss_NormalTex1_s, v5.xy).xyz;
  r1.xyz = s_DiffuseTex1.Sample(ss_DiffuseTex1_s, v5.xy).xyz;
  r2.xy = s_SpecMaskTex1.Sample(ss_SpecMaskTex1_s, v5.xy).xz;
  r3.xyz = s_SpecMaskTex2.Sample(ss_SpecMaskTex2_s, v5.xy).xyz;
  r0.w = cmp(u_ColorFilter.w < 0.999000013);
  if (r0.w != 0) {
    x0[0].x = 0.0588235296;
    x0[1].x = 0.529411793;
    x0[2].x = 0.176470593;
    x0[3].x = 0.647058845;
    x0[4].x = 0.764705896;
    x0[5].x = 0.294117659;
    x0[6].x = 0.882352948;
    x0[7].x = 0.411764711;
    x0[8].x = 0.235294119;
    x0[9].x = 0.70588237;
    x0[10].x = 0.117647059;
    x0[11].x = 0.588235319;
    x0[12].x = 0.941176474;
    x0[13].x = 0.470588237;
    x0[14].x = 0.823529422;
    x0[15].x = 0.352941185;
    r2.zw = (uint2)v0.xy;
    bitmask.w = ((~(-1 << 2)) << 2) & 0xffffffff;  r0.w = (((uint)r2.z << 2) & bitmask.w) | ((uint)0 & ~bitmask.w);
    bitmask.w = ((~(-1 << 2)) << 0) & 0xffffffff;  r0.w = (((uint)r2.w << 0) & bitmask.w) | ((uint)r0.w & ~bitmask.w);
    r0.w = x0[r0.w+0].x;
    r0.w = u_ColorFilter.w + -r0.w;
    r1.w = u_BlendRate.y * -2 + 1;
    r0.w = r1.w * r0.w;
    r0.w = cmp(r0.w < 0);
    if (r0.w != 0) discard;
  }
  r1.xyz = log2(r1.xyz);
  r1.xyz = float3(2.20000005,2.20000005,2.20000005) * r1.xyz;
  r1.xyz = exp2(r1.xyz);
  r4.xyz = u_ObjBlendColor3.xyz + -r1.xyz;
  r1.xyz = r3.zzz * r4.xyz + r1.xyz;
  r4.xyz = u_ObjBlendColor2.xyz + -r1.xyz;
  r1.xyz = r3.yyy * r4.xyz + r1.xyz;
  r3.yzw = u_ObjBlendColor1.xyz + -r1.xyz;
  r1.xyz = r3.xxx * r3.yzw + r1.xyz;
  r3.xyz = u_ColorFilter.xyz * u_MatDiffuse.xyz;
  r1.xyz = r3.xyz * r1.xyz;
  r1.xyz = float3(0.600000024,0.600000024,0.600000024) * r1.xyz;
  r0.xyz = float3(-0.5,-0.5,-0.5) + r0.xyz;
  r0.xyz = r0.xyz + r0.xyz;
  r3.xyz = v4.xyz * r0.yyy;
  r0.xyw = r0.xxx * v3.xyz + r3.xyz;
  r0.xyz = r0.zzz * v2.xyz + r0.xyw;
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r0.w = max(u_MatEmission.x, r2.y);
  r2.yzw = r1.xyz * r0.www;
  r2.yzw = u_ObjEmisCoef * r2.yzw;
  r1.w = u_MatSpecular * r2.x;
  r0.w = 1 + -r0.w;
  r1.w = r1.w * r0.w;
  r1.w = -r1.w * 0.5 + 0.75;
  r3.xyz = r1.xyz * r0.www;
  r2.x = -1 + u_OverrideMaterial.y;
  r2.x = u_OverrideMaterial.x * r2.x + 1;
  r3.w = u_OverrideMaterial.z + -r1.w;
  o1.y = u_OverrideMaterial.x * r3.w + r1.w;
  r2.yzw = r2.yzw / u_TonemapExposure;
  r2.yzw = u_EnhanceBrightnessScale * r2.yzw;
  r2.yzw = u_TonemapExposure * r2.yzw;
  r2.yzw = log2(r2.yzw);
  r2.yzw = u_EnhanceBrightnessPower * r2.yzw;
  r2.yzw = exp2(r2.yzw);
  r2.yzw = r2.yzw / u_TonemapExposure;
  r1.w = r2.y + r2.z;
  r1.w = r1.w + r2.w;
  r1.w = cmp(r1.w >= 9.99999997e-007);
  r1.w = r1.w ? 1.000000 : 0;
  r2.yzw = r1.www * r2.yzw;
  r1.w = dot(r3.xyz, float3(0.298999995,0.587000012,0.114));
  r1.w = 9.99999997e-007 + r1.w;
  r3.w = -2.88539004 * r1.w;
  r3.w = exp2(r3.w);
  r3.w = 1 + -r3.w;
  r3.w = log2(r3.w);
  r3.w = 1.5 * r3.w;
  r3.w = exp2(r3.w);
  r4.xyz = r3.xyz * r3.www;
  r4.xyz = r4.xyz / r1.www;
  r1.xyz = -r1.xyz * r0.www + r4.xyz;
  r1.xyz = r2.xxx * r1.xyz + r3.xyz;
  o0.xyz = saturate(float3(0.5,0.5,0.5) * r1.xyz);
  o2.xyz = r0.xyz * float3(0.5,0.5,0.5) + float3(0.5,0.5,0.5);
  r0.xyz = rsqrt(r2.yzw);
  o3.xyz = float3(1,1,1) / r0.xyz;
  o0.w = u_Ambient.w;
  o1.zw = float2(0.68235296,1);
  o1.x = r2.x;
  o2.w = 0;
  o3.w = 0;
  o4.xy = v6.xy;
  o4.zw = float2(0,0);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v1.3.16 on Fri Mar 05 21:53:44 2021
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 u_BlendRate;                // Offset:    0 Size:    16
//   float4 u_ColorFilter;              // Offset:   16 Size:    16
//   float4 u_Ambient;                  // Offset:   32 Size:    16
//
// }
//
// cbuffer EnvironmentPS
// {
//
//   float u_Deltatime;                 // Offset:    0 Size:     4 [unused]
//   float u_InvDeltatime;              // Offset:    4 Size:     4 [unused]
//   float u_TonemapExposure;           // Offset:    8 Size:     4
//   float u_Time;                      // Offset:   12 Size:     4 [unused]
//   float4 u_Light_Parallel_DirectionPS;// Offset:   16 Size:    16 [unused]
//   float4 u_Light_Parallel_ColorPS;   // Offset:   32 Size:    16 [unused]
//   float4 u_Light_Env_ColorPS;        // Offset:   48 Size:    16 [unused]
//   float4 u_Fog_ColorPS;              // Offset:   64 Size:    16 [unused]
//   float4 u_HeightFogColor;           // Offset:   80 Size:    16 [unused]
//   float4 u_Fog_Parameters;           // Offset:   96 Size:    16 [unused]
//   float4 u_HeightFogParam;           // Offset:  112 Size:    16 [unused]
//   float u_WeatherOut;                // Offset:  128 Size:     4 [unused]
//   float u_NightRatio;                // Offset:  132 Size:     4 [unused]
//   float2 u_ScreenResolution;         // Offset:  136 Size:     8 [unused]
//   float u_EdgeLightRate;             // Offset:  144 Size:     4 [unused]
//   float u_ZNear;                     // Offset:  148 Size:     4 [unused]
//   float u_ZNearFar;                  // Offset:  152 Size:     4 [unused]
//   float u_ZRange;                    // Offset:  156 Size:     4 [unused]
//   float4 u_ScreenRect;               // Offset:  160 Size:    16 [unused]
//   float4 u_ShadowParam;              // Offset:  176 Size:    16 [unused]
//   float3 u_EnvMap_Position;          // Offset:  192 Size:    12 [unused]
//   float u_EnvMap_Radius;             // Offset:  204 Size:     4 [unused]
//   float3 u_Camera_Position;          // Offset:  208 Size:    12 [unused]
//   float u_ZBias;                     // Offset:  220 Size:     4 [unused]
//   float4x4 u_InvViewProjectionMatrix;// Offset:  224 Size:    64 [unused]
//   float4x4 u_ViewProjectionMatrix;   // Offset:  288 Size:    64 [unused]
//   float4x4 u_ProjectionMatrix;       // Offset:  352 Size:    64 [unused]
//   float4x4 u_ViewMatrix;             // Offset:  416 Size:    64 [unused]
//   float2 u_InvScreenResolution;      // Offset:  480 Size:     8 [unused]
//   float2 u_AtmosphereHeight;         // Offset:  488 Size:     8 [unused]
//   float4 u_SkyColorPS;               // Offset:  496 Size:    16 [unused]
//   float u_FogLimit;                  // Offset:  512 Size:     4 [unused]
//   float u_FogHeightDecayIntensity;   // Offset:  516 Size:     4 [unused]
//   float u_ModelReyleighIntensity;    // Offset:  520 Size:     4 [unused]
//   uint u_RenderFlag;                 // Offset:  524 Size:     4 [unused]
//   float4 u_OverrideMaterial;         // Offset:  528 Size:    16
//   float u_WaterHeight;               // Offset:  544 Size:     4 [unused]
//   float u_InstanceFadeOffset;        // Offset:  548 Size:     4 [unused]
//   float u_IndirectDiffuseIntensity;  // Offset:  552 Size:     4 [unused]
//   float u_IndirectSpecularIntensity; // Offset:  556 Size:     4 [unused]
//   float u_IndirectSkylightIntensity; // Offset:  560 Size:     4 [unused]
//   float u_EnhanceBrightnessScale;    // Offset:  564 Size:     4
//   float u_EnhanceBrightnessPower;    // Offset:  568 Size:     4
//   float u_MieNearConstraint;         // Offset:  572 Size:     4 [unused]
//   float u_ModelReyleighNearConstraint;// Offset:  576 Size:     4 [unused]
//   float u_EnlightenAttenStart;       // Offset:  580 Size:     4 [unused]
//   float u_EnlightenAttenEnd;         // Offset:  584 Size:     4 [unused]
//   float u_FarTextureRatioOffset;     // Offset:  588 Size:     4 [unused]
//   float3 u_Protagonist_Position;     // Offset:  592 Size:    12 [unused]
//   float u_Dummy;                     // Offset:  604 Size:     4 [unused]
//   float4 u_SeaScatteringRate;        // Offset:  608 Size:    16 [unused]
//   float u_DebugHair;                 // Offset:  624 Size:     4 [unused]
//   float u_CharacterColorRate;        // Offset:  628 Size:     4 [unused]
//   float u_CharacterColorPow;         // Offset:  632 Size:     4 [unused]
//   float u_CloudCoverage;             // Offset:  636 Size:     4 [unused]
//   float2 u_ScreenRate;               // Offset:  640 Size:     8 [unused]
//
// }
//
// cbuffer MaterialPS
// {
//
//   float4 u_MatDiffuse;               // Offset:    0 Size:    16
//   float3 u_MatEmission;              // Offset:   16 Size:    12
//   float u_TexBlendOut1;              // Offset:   28 Size:     4 [unused]
//   float u_TexBlendOut2;              // Offset:   32 Size:     4 [unused]
//   float u_TexBlendOut3;              // Offset:   36 Size:     4 [unused]
//   float u_TexBlendOut4;              // Offset:   40 Size:     4 [unused]
//   float u_MatSpecular;               // Offset:   44 Size:     4
//
// }
//
// cbuffer ObjectCustomPS
// {
//
//   float u_ObjEmisCoef;               // Offset:    0 Size:     4
//   float u_SkinWet;                   // Offset:    4 Size:     4 [unused]
//   float u_RainWet;                   // Offset:    8 Size:     4 [unused]
//   float u_EyeAddSpecPow;             // Offset:   12 Size:     4 [unused]
//   float u_DecalEmission;             // Offset:   16 Size:     4 [unused]
//   float u_ColorConvertRate;          // Offset:   20 Size:     4 [unused]
//   float u_obj_padding2;              // Offset:   24 Size:     4 [unused]
//   float u_obj_padding3;              // Offset:   28 Size:     4 [unused]
//   float4 u_ObjBlendColor1;           // Offset:   32 Size:    16
//   float4 u_ObjBlendColor2;           // Offset:   48 Size:    16
//   float4 u_ObjBlendColor3;           // Offset:   64 Size:    16
//   float4 u_ObjBlendColor4;           // Offset:   80 Size:    16 [unused]
//   float4 u_ObjBlendColor5;           // Offset:   96 Size:    16 [unused]
//   float4 u_ObjBlendColor6;           // Offset:  112 Size:    16 [unused]
//   float4 u_FadeTextureRate;          // Offset:  128 Size:    16 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ss_DiffuseTex1                    sampler      NA          NA    0        1
// ss_SpecMaskTex1                   sampler      NA          NA    1        1
// ss_SpecMaskTex2                   sampler      NA          NA    2        1
// ss_NormalTex1                     sampler      NA          NA    3        1
// s_DiffuseTex1                     texture  float4          2d    0        1
// s_SpecMaskTex1                    texture  float4          2d    1        1
// s_SpecMaskTex2                    texture  float4          2d    2        1
// s_NormalTex1                      texture  float4          2d    3        1
// $Globals                          cbuffer      NA          NA    0        1
// EnvironmentPS                     cbuffer      NA          NA    1        1
// MaterialPS                        cbuffer      NA          NA    3        1
// ObjectCustomPS                    cbuffer      NA          NA    5        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float   xy
// TEXCOORD                 0   xyzw        1     NONE   float
// TEXCOORD                 1   xyzw        2     NONE   float   xyz
// TEXCOORD                 2   xyzw        3     NONE   float   xyz
// TEXCOORD                 3   xyzw        4     NONE   float   xyz
// TEXCOORD                 4   xyzw        5     NONE   float   xy
// TEXCOORD                 5   xyzw        6     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
// SV_Target                1   xyzw        1   TARGET   float   xyzw
// SV_Target                2   xyzw        2   TARGET   float   xyzw
// SV_Target                3   xyzw        3   TARGET   float   xyzw
// SV_Target                4   xyzw        4   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[3], immediateIndexed
dcl_constantbuffer cb1[36], immediateIndexed
dcl_constantbuffer cb3[3], immediateIndexed
dcl_constantbuffer cb5[5], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s3, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t3
dcl_input_ps_siv linear noperspective v0.xy, position
dcl_input_ps linear v2.xyz
dcl_input_ps linear v3.xyz
dcl_input_ps linear v4.xyz
dcl_input_ps linear v5.xy
dcl_input_ps linear v6.xy
dcl_output o0.xyzw
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_temps 5
dcl_indexableTemp x0[16], 4
sample_indexable(texture2d)(float,float,float,float) r0.xyz, v5.xyxx, t3.xyzw, s3
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v5.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r2.xy, v5.xyxx, t1.xzyw, s1
sample_indexable(texture2d)(float,float,float,float) r3.xyz, v5.xyxx, t2.xyzw, s2
lt r0.w, cb0[1].w, l(0.999000)
if_nz r0.w
  mov x0[0].x, l(0.0588235296)
  mov x0[1].x, l(0.529411793)
  mov x0[2].x, l(0.176470593)
  mov x0[3].x, l(0.647058845)
  mov x0[4].x, l(0.764705896)
  mov x0[5].x, l(0.294117659)
  mov x0[6].x, l(0.882352948)
  mov x0[7].x, l(0.411764711)
  mov x0[8].x, l(0.235294119)
  mov x0[9].x, l(0.705882370)
  mov x0[10].x, l(0.117647059)
  mov x0[11].x, l(0.588235319)
  mov x0[12].x, l(0.941176474)
  mov x0[13].x, l(0.470588237)
  mov x0[14].x, l(0.823529422)
  mov x0[15].x, l(0.352941185)
  ftou r2.zw, v0.xxxy
  bfi r0.w, l(2), l(2), r2.z, l(0)
  bfi r0.w, l(2), l(0), r2.w, r0.w
  mov r0.w, x0[r0.w + 0].x
  add r0.w, -r0.w, cb0[1].w
  mad r1.w, cb0[0].y, l(-2.000000), l(1.000000)
  mul r0.w, r0.w, r1.w
  lt r0.w, r0.w, l(0.000000)
  discard_nz r0.w
endif
log r1.xyz, r1.xyzx
mul r1.xyz, r1.xyzx, l(2.200000, 2.200000, 2.200000, 0.000000)
exp r1.xyz, r1.xyzx
add r4.xyz, -r1.xyzx, cb5[4].xyzx
mad r1.xyz, r3.zzzz, r4.xyzx, r1.xyzx
add r4.xyz, -r1.xyzx, cb5[3].xyzx
mad r1.xyz, r3.yyyy, r4.xyzx, r1.xyzx
add r3.yzw, -r1.xxyz, cb5[2].xxyz
mad r1.xyz, r3.xxxx, r3.yzwy, r1.xyzx
mul r3.xyz, cb3[0].xyzx, cb0[1].xyzx
mul r1.xyz, r1.xyzx, r3.xyzx
mul r1.xyz, r1.xyzx, l(0.600000, 0.600000, 0.600000, 0.000000)
add r0.xyz, r0.xyzx, l(-0.500000, -0.500000, -0.500000, 0.000000)
add r0.xyz, r0.xyzx, r0.xyzx
mul r3.xyz, r0.yyyy, v4.xyzx
mad r0.xyw, r0.xxxx, v3.xyxz, r3.xyxz
mad r0.xyz, r0.zzzz, v2.xyzx, r0.xywx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r0.w, r0.w
mul r0.xyz, r0.wwww, r0.xyzx
max r0.w, r2.y, cb3[1].x
mul r2.yzw, r0.wwww, r1.xxyz
mul r2.yzw, r2.yyzw, cb5[0].xxxx
mul r1.w, r2.x, cb3[2].w
add r0.w, -r0.w, l(1.000000)
mul r1.w, r0.w, r1.w
mad r1.w, -r1.w, l(0.500000), l(0.750000)
mul r3.xyz, r0.wwww, r1.xyzx
add r2.x, cb1[33].y, l(-1.000000)
mad r2.x, cb1[33].x, r2.x, l(1.000000)
add r3.w, -r1.w, cb1[33].z
mad o1.y, cb1[33].x, r3.w, r1.w
div r2.yzw, r2.yyzw, cb1[0].zzzz
mul r2.yzw, r2.yyzw, cb1[35].yyyy
mul r2.yzw, r2.yyzw, cb1[0].zzzz
log r2.yzw, r2.yyzw
mul r2.yzw, r2.yyzw, cb1[35].zzzz
exp r2.yzw, r2.yyzw
div r2.yzw, r2.yyzw, cb1[0].zzzz
add r1.w, r2.z, r2.y
add r1.w, r2.w, r1.w
ge r1.w, r1.w, l(0.000001)
and r1.w, r1.w, l(0x3f800000)
mul r2.yzw, r2.yyzw, r1.wwww
dp3 r1.w, r3.xyzx, l(0.299000, 0.587000, 0.114000, 0.000000)
add r1.w, r1.w, l(0.000001)
mul r3.w, r1.w, l(-2.885390)
exp r3.w, r3.w
add r3.w, -r3.w, l(1.000000)
log r3.w, r3.w
mul r3.w, r3.w, l(1.500000)
exp r3.w, r3.w
mul r4.xyz, r3.wwww, r3.xyzx
div r4.xyz, r4.xyzx, r1.wwww
mad r1.xyz, -r1.xyzx, r0.wwww, r4.xyzx
mad r1.xyz, r2.xxxx, r1.xyzx, r3.xyzx
mul_sat o0.xyz, r1.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000)
mad o2.xyz, r0.xyzx, l(0.500000, 0.500000, 0.500000, 0.000000), l(0.500000, 0.500000, 0.500000, 0.000000)
rsq r0.xyz, r2.yzwy
div o3.xyz, l(1.000000, 1.000000, 1.000000, 1.000000), r0.xyzx
mov o0.w, cb0[2].w
mov o1.zw, l(0,0,0.682352960,1.000000)
mov o1.x, r2.x
mov o2.w, l(0)
mov o3.w, l(0)
mov o4.xy, v6.xyxx
mov o4.zw, l(0,0,0,0)
ret
// Approximately 100 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
