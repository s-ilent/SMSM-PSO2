// Exposure or colour correction.
// ---- Created with 3Dmigoto v1.3.16

cbuffer _Globals : register(b0)
{
  float4 u_coefficient[2] : packoffset(c0);
}

cbuffer EnvironmentPS : register(b1)
{
  float u_Deltatime : packoffset(c0);
  float u_InvDeltatime : packoffset(c0.y);
  float u_TonemapExposure : packoffset(c0.z);
  float u_Time : packoffset(c0.w);
  float4 u_Light_Parallel_DirectionPS : packoffset(c1);
  float4 u_Light_Parallel_ColorPS : packoffset(c2);
  float4 u_Light_Env_ColorPS : packoffset(c3);
  float4 u_Fog_ColorPS : packoffset(c4);
  float4 u_HeightFogColor : packoffset(c5);
  float4 u_Fog_Parameters : packoffset(c6);
  float4 u_HeightFogParam : packoffset(c7);
  float u_WeatherOut : packoffset(c8);
  float u_NightRatio : packoffset(c8.y);
  float2 u_ScreenResolution : packoffset(c8.z);
  float u_EdgeLightRate : packoffset(c9);
  float u_ZNear : packoffset(c9.y);
  float u_ZNearFar : packoffset(c9.z);
  float u_ZRange : packoffset(c9.w);
  float4 u_ScreenRect : packoffset(c10);
  float4 u_ShadowParam : packoffset(c11);
  float3 u_EnvMap_Position : packoffset(c12);
  float u_EnvMap_Radius : packoffset(c12.w);
  float3 u_Camera_Position : packoffset(c13);
  float u_ZBias : packoffset(c13.w);
  float4x4 u_InvViewProjectionMatrix : packoffset(c14);
  float4x4 u_ViewProjectionMatrix : packoffset(c18);
  float4x4 u_ProjectionMatrix : packoffset(c22);
  float4x4 u_ViewMatrix : packoffset(c26);
  float2 u_InvScreenResolution : packoffset(c30);
  float2 u_AtmosphereHeight : packoffset(c30.z);
  float4 u_SkyColorPS : packoffset(c31);
  float u_FogLimit : packoffset(c32);
  float u_FogHeightDecayIntensity : packoffset(c32.y);
  float u_ModelReyleighIntensity : packoffset(c32.z);
  uint u_RenderFlag : packoffset(c32.w);
  float4 u_OverrideMaterial : packoffset(c33);
  float u_WaterHeight : packoffset(c34);
  float u_InstanceFadeOffset : packoffset(c34.y);
  float u_IndirectDiffuseIntensity : packoffset(c34.z);
  float u_IndirectSpecularIntensity : packoffset(c34.w);
  float u_IndirectSkylightIntensity : packoffset(c35);
  float u_EnhanceBrightnessScale : packoffset(c35.y);
  float u_EnhanceBrightnessPower : packoffset(c35.z);
  float u_MieNearConstraint : packoffset(c35.w);
  float u_ModelReyleighNearConstraint : packoffset(c36);
  float u_EnlightenAttenStart : packoffset(c36.y);
  float u_EnlightenAttenEnd : packoffset(c36.z);
  float u_FarTextureRatioOffset : packoffset(c36.w);
  float3 u_Protagonist_Position : packoffset(c37);
  float u_Dummy : packoffset(c37.w);
  float4 u_SeaScatteringRate : packoffset(c38);
  float u_DebugHair : packoffset(c39);
  float u_CharacterColorRate : packoffset(c39.y);
  float u_CharacterColorPow : packoffset(c39.z);
  float u_CloudCoverage : packoffset(c39.w);
  float2 u_ScreenRate : packoffset(c40);
}

SamplerState ss0_s : register(s0);
SamplerState ss1_s : register(s1);
Texture2D<float4> s0 : register(t0);
Texture2D<float4> s1 : register(t1);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = s1.Sample(ss1_s, float2(0.5,0.5)).x;
  r1.xyzw = s0.Sample(ss0_s, v1.xy).xyzw;
  r1.xyzw = max(float4(0,0,0,0), r1.xyzw);
  r0.xyz = r1.xyz * r0.xxx;
  o0.w = r1.w;
  r1.xyz = u_coefficient[0].xxx * r0.xyz + u_coefficient[0].yyy;
  r1.xyz = r1.xyz * r0.xyz;
  r2.xyz = u_coefficient[0].zzz * r0.xyz + u_coefficient[0].www;
  r0.xyz = r0.xyz * r2.xyz + u_coefficient[1].xxx;
  r0.xyz = saturate(r1.xyz / r0.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.454545468,0.454545468,0.454545468) * r0.xyz;
  o0.xyz = exp2(r0.xyz);

  const float dither_bit = 8.0; //Bit-depth of display. Normally 8 but some LCD monitors are 7 or even 6-bit. 
  //Calculate grid position
  float grid_position = frac( dot( v0.xy - float2(0.5,0.5) , float2(1.0/16.0,10.0/36.0) + 0.25 ) );
  //Calculate how big the shift should be
  float dither_shift = (0.25) * (1.0 / (pow(2.0,dither_bit) - 1.0));
  //Shift the individual colors differently, thus making it even harder to see the dithering pattern
  float3 dither_shift_RGB = float3(dither_shift, -dither_shift, dither_shift); //subpixel dithering
  //modify shift acording to grid position.
  dither_shift_RGB = lerp(2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position); //shift acording to grid position.
  //shift the color by dither_shift
  o0.xyz = o0.xyz + 0.5/255.0 + dither_shift_RGB; 

  return;
}
void main_orig(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = s1.Sample(ss1_s, float2(0.5,0.5)).x;
  r1.xyzw = s0.Sample(ss0_s, v1.xy).xyzw;
  r1.xyzw = max(float4(0,0,0,0), r1.xyzw);
  r0.xyz = r1.xyz * r0.xxx;
  o0.w = r1.w;
  r1.xyz = u_coefficient[0].xxx * r0.xyz + u_coefficient[0].yyy;
  r1.xyz = r1.xyz * r0.xyz;
  r2.xyz = u_coefficient[0].zzz * r0.xyz + u_coefficient[0].www;
  r0.xyz = r0.xyz * r2.xyz + u_coefficient[1].xxx;
  r0.xyz = saturate(r1.xyz / r0.xyz);
  r0.xyz = log2(r0.xyz);
  r0.xyz = float3(0.454545468,0.454545468,0.454545468) * r0.xyz;
  o0.xyz = exp2(r0.xyz);
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v1.3.16 on Fri Mar 05 20:11:39 2021
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 u_coefficient[2];           // Offset:    0 Size:    32
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ss0                               sampler      NA          NA    0        1
// ss1                               sampler      NA          NA    1        1
// s0                                texture  float4          2d    0        1
// s1                                texture  float4          2d    1        1
// $Globals                          cbuffer      NA          NA    0        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[2], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 3
sample_indexable(texture2d)(float,float,float,float) r0.x, l(0.500000, 0.500000, 0.000000, 0.000000), t1.xyzw, s1
sample_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t0.xyzw, s0
max r1.xyzw, r1.xyzw, l(0.000000, 0.000000, 0.000000, 0.000000)
mul r0.xyz, r0.xxxx, r1.xyzx
mov o0.w, r1.w
mad r1.xyz, cb0[0].xxxx, r0.xyzx, cb0[0].yyyy
mul r1.xyz, r0.xyzx, r1.xyzx
mad r2.xyz, cb0[0].zzzz, r0.xyzx, cb0[0].wwww
mad r0.xyz, r0.xyzx, r2.xyzx, cb0[1].xxxx
div_sat r0.xyz, r1.xyzx, r0.xyzx
log r0.xyz, r0.xyzx
mul r0.xyz, r0.xyzx, l(0.454545468, 0.454545468, 0.454545468, 0.000000)
exp o0.xyz, r0.xyzx
ret
// Approximately 14 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
