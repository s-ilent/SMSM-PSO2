// Motion blur
// ---- Created with 3Dmigoto v1.3.16 on Fri Mar 05 15:00:54 2021

cbuffer _Globals : register(b0)
{
  float4 u_BlurParam : packoffset(c0);
}

cbuffer EnvironmentPS : register(b1)
{
  float u_Deltatime : packoffset(c0);
  float u_InvDeltatime : packoffset(c0.y);
  float u_TonemapExposure : packoffset(c0.z);
  float u_Time : packoffset(c0.w);
  float4 u_Light_Parallel_DirectionPS : packoffset(c1);
  float4 u_Light_Parallel_ColorPS : packoffset(c2);
  float4 u_Light_Env_ColorPS : packoffset(c3);
  float4 u_Fog_ColorPS : packoffset(c4);
  float4 u_HeightFogColor : packoffset(c5);
  float4 u_Fog_Parameters : packoffset(c6);
  float4 u_HeightFogParam : packoffset(c7);
  float u_WeatherOut : packoffset(c8);
  float u_NightRatio : packoffset(c8.y);
  float2 u_ScreenResolution : packoffset(c8.z);
  float u_EdgeLightRate : packoffset(c9);
  float u_ZNear : packoffset(c9.y);
  float u_ZNearFar : packoffset(c9.z);
  float u_ZRange : packoffset(c9.w);
  float4 u_ScreenRect : packoffset(c10);
  float4 u_ShadowParam : packoffset(c11);
  float3 u_EnvMap_Position : packoffset(c12);
  float u_EnvMap_Radius : packoffset(c12.w);
  float3 u_Camera_Position : packoffset(c13);
  float u_ZBias : packoffset(c13.w);
  float4x4 u_InvViewProjectionMatrix : packoffset(c14);
  float4x4 u_ViewProjectionMatrix : packoffset(c18);
  float4x4 u_ProjectionMatrix : packoffset(c22);
  float4x4 u_ViewMatrix : packoffset(c26);
  float2 u_InvScreenResolution : packoffset(c30);
  float2 u_AtmosphereHeight : packoffset(c30.z);
  float4 u_SkyColorPS : packoffset(c31);
  float u_FogLimit : packoffset(c32);
  float u_FogHeightDecayIntensity : packoffset(c32.y);
  float u_ModelReyleighIntensity : packoffset(c32.z);
  uint u_RenderFlag : packoffset(c32.w);
  float4 u_OverrideMaterial : packoffset(c33);
  float u_WaterHeight : packoffset(c34);
  float u_InstanceFadeOffset : packoffset(c34.y);
  float u_IndirectDiffuseIntensity : packoffset(c34.z);
  float u_IndirectSpecularIntensity : packoffset(c34.w);
  float u_IndirectSkylightIntensity : packoffset(c35);
  float u_EnhanceBrightnessScale : packoffset(c35.y);
  float u_EnhanceBrightnessPower : packoffset(c35.z);
  float u_MieNearConstraint : packoffset(c35.w);
  float u_ModelReyleighNearConstraint : packoffset(c36);
  float u_EnlightenAttenStart : packoffset(c36.y);
  float u_EnlightenAttenEnd : packoffset(c36.z);
  float u_FarTextureRatioOffset : packoffset(c36.w);
  float3 u_Protagonist_Position : packoffset(c37);
  float u_Dummy : packoffset(c37.w);
  float4 u_SeaScatteringRate : packoffset(c38);
  float u_DebugHair : packoffset(c39);
  float u_CharacterColorRate : packoffset(c39.y);
  float u_CharacterColorPow : packoffset(c39.z);
  float u_CloudCoverage : packoffset(c39.w);
  float2 u_ScreenRate : packoffset(c40);
}

SamplerState ss0_s : register(s0);
SamplerState ss1_s : register(s1);
SamplerState ss2_s : register(s2);
Texture2D<float4> s0 : register(t0);
Texture2D<float4> s1 : register(t1);
Texture2D<float4> s2 : register(t2);


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);

#include "Common.hlsl"

/* Notes
The motion blur takes 8 samples. Adding dithering to the initial coords
from velocity seems to leave some big steps in, even if it cleans the smaller ones.
The second pass works a bit differently though.
*/

void main(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  // Add dithering to velocity so the samples are spread out over length
  float dither = dither_r(u_ScreenResolution * (v1.xy + u_Time * u_Deltatime));
  dither = remap_tri(dither);

  // Remap delta time to be relative to 60FPS
  r0.x = saturate(0.0166666675 * u_InvDeltatime);
  // Read velocity buffer
  r0.yz = s1.Sample(ss1_s, v1.xy).xy;
  r0.xy = r0.yz * r0.xx;
  r0.z = dot(r0.xy, r0.xy);
  r0.z = sqrt(r0.z);
  r0.w = cmp(r0.z < 9.99999975e-005);
  if (r0.w != 0) discard;

    r0.xy = (r0.xy + r0.xy * dither );

  r0.w = s2.Sample(ss2_s, v1.xy).x;
  // Base screen sample
  r1.xyz = s0.Sample(ss0_s, v1.xy).xyz;

  // Remap motion to coords for sampling
  r2.xy = -r0.xy * float2(0.5,0.5) + v1.xy;
  r2.xy = max(u_ScreenRect.xz, r2.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r2.zw = float2(0.00100000005,-0.999000013) + r0.ww;
  r0.w = cmp(r2.z >= r1.w);
  if (r0.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 2;
  } else {
    r0.w = 1;
  }
  r2.xy = r0.xy * float2(-0.375,-0.375) + v1.xy;
  r2.xy = max(u_ScreenRect.xz, r2.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r3.xyzw = r0.xyxy * float4(-0.25,-0.25,-0.125,-0.125) + v1.xyxy;
  r3.xyzw = max(u_ScreenRect.xzxz, r3.xyzw);
  r3.xyzw = min(u_ScreenRect.ywyw, r3.xyzw);
  r1.w = s2.Sample(ss2_s, r3.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r4.xyz = s0.Sample(ss0_s, r3.xy).xyz;
    r1.xyz = r4.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r1.w = s2.Sample(ss2_s, r3.zw).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r3.zw).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r2.xy = max(u_ScreenRect.xz, v1.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r3.xyzw = r0.xyxy * float4(0.125,0.125,0.25,0.25) + v1.xyxy;
  r3.xyzw = max(u_ScreenRect.xzxz, r3.xyzw);
  r3.xyzw = min(u_ScreenRect.ywyw, r3.xyzw);
  r1.w = s2.Sample(ss2_s, r3.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r4.xyz = s0.Sample(ss0_s, r3.xy).xyz;
    r1.xyz = r4.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r1.w = s2.Sample(ss2_s, r3.zw).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r3.zw).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r0.xy = r0.xy * float2(0.375,0.375) + v1.xy;
  r0.xy = max(u_ScreenRect.xz, r0.xy);
  r0.xy = min(u_ScreenRect.yw, r0.xy);
  r1.w = s2.Sample(ss2_s, r0.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r2.xyz = s0.Sample(ss0_s, r0.xy).xyz;
    r1.xyz = r2.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  o0.xyz = r1.xyz / r0.www;
  r0.x = max(0, r2.w);
  r0.y = 100 * r0.z;
  r0.x = -r0.x * 1000 + 1;
  r0.x = r0.y * r0.x;
  r0.x = min(1, r0.x);
  o0.w = u_BlurParam.x * r0.x;

  //o0.xyz = dither;
  return;
}

void main_orig(
  float4 v0 : SV_Position0,
  float2 v1 : TEXCOORD0,
  out float4 o0 : SV_Target0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  r0.x = saturate(0.0166666675 * u_InvDeltatime);
  r0.yz = s1.Sample(ss1_s, v1.xy).xy;
  r0.xy = r0.yz * r0.xx;
  r0.z = dot(r0.xy, r0.xy);
  r0.z = sqrt(r0.z);
  r0.w = cmp(r0.z < 9.99999975e-005);
  if (r0.w != 0) discard;
  r0.w = s2.Sample(ss2_s, v1.xy).x;
  r1.xyz = s0.Sample(ss0_s, v1.xy).xyz;
  r2.xy = -r0.xy * float2(0.5,0.5) + v1.xy;
  r2.xy = max(u_ScreenRect.xz, r2.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r2.zw = float2(0.00100000005,-0.999000013) + r0.ww;
  r0.w = cmp(r2.z >= r1.w);
  if (r0.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 2;
  } else {
    r0.w = 1;
  }
  r2.xy = r0.xy * float2(-0.375,-0.375) + v1.xy;
  r2.xy = max(u_ScreenRect.xz, r2.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r3.xyzw = r0.xyxy * float4(-0.25,-0.25,-0.125,-0.125) + v1.xyxy;
  r3.xyzw = max(u_ScreenRect.xzxz, r3.xyzw);
  r3.xyzw = min(u_ScreenRect.ywyw, r3.xyzw);
  r1.w = s2.Sample(ss2_s, r3.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r4.xyz = s0.Sample(ss0_s, r3.xy).xyz;
    r1.xyz = r4.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r1.w = s2.Sample(ss2_s, r3.zw).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r3.zw).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r2.xy = max(u_ScreenRect.xz, v1.xy);
  r2.xy = min(u_ScreenRect.yw, r2.xy);
  r1.w = s2.Sample(ss2_s, r2.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r2.xy).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r3.xyzw = r0.xyxy * float4(0.125,0.125,0.25,0.25) + v1.xyxy;
  r3.xyzw = max(u_ScreenRect.xzxz, r3.xyzw);
  r3.xyzw = min(u_ScreenRect.ywyw, r3.xyzw);
  r1.w = s2.Sample(ss2_s, r3.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r4.xyz = s0.Sample(ss0_s, r3.xy).xyz;
    r1.xyz = r4.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r1.w = s2.Sample(ss2_s, r3.zw).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r3.xyz = s0.Sample(ss0_s, r3.zw).xyz;
    r1.xyz = r3.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  r0.xy = r0.xy * float2(0.375,0.375) + v1.xy;
  r0.xy = max(u_ScreenRect.xz, r0.xy);
  r0.xy = min(u_ScreenRect.yw, r0.xy);
  r1.w = s2.Sample(ss2_s, r0.xy).x;
  r1.w = cmp(r2.z >= r1.w);
  if (r1.w != 0) {
    r2.xyz = s0.Sample(ss0_s, r0.xy).xyz;
    r1.xyz = r2.xyz + r1.xyz;
    r0.w = 1 + r0.w;
  }
  o0.xyz = r1.xyz / r0.www;
  r0.x = max(0, r2.w);
  r0.y = 100 * r0.z;
  r0.x = -r0.x * 1000 + 1;
  r0.x = r0.y * r0.x;
  r0.x = min(1, r0.x);
  o0.w = u_BlurParam.x * r0.x;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//   using 3Dmigoto v1.3.16 on Fri Mar 05 15:00:54 2021
//
//
// Buffer Definitions:
//
// cbuffer $Globals
// {
//
//   float4 u_BlurParam;                // Offset:    0 Size:    16
//
// }
//
// cbuffer EnvironmentPS
// {
//
//   float u_Deltatime;                 // Offset:    0 Size:     4 [unused]
//   float u_InvDeltatime;              // Offset:    4 Size:     4
//   float u_TonemapExposure;           // Offset:    8 Size:     4 [unused]
//   float u_Time;                      // Offset:   12 Size:     4 [unused]
//   float4 u_Light_Parallel_DirectionPS;// Offset:   16 Size:    16 [unused]
//   float4 u_Light_Parallel_ColorPS;   // Offset:   32 Size:    16 [unused]
//   float4 u_Light_Env_ColorPS;        // Offset:   48 Size:    16 [unused]
//   float4 u_Fog_ColorPS;              // Offset:   64 Size:    16 [unused]
//   float4 u_HeightFogColor;           // Offset:   80 Size:    16 [unused]
//   float4 u_Fog_Parameters;           // Offset:   96 Size:    16 [unused]
//   float4 u_HeightFogParam;           // Offset:  112 Size:    16 [unused]
//   float u_WeatherOut;                // Offset:  128 Size:     4 [unused]
//   float u_NightRatio;                // Offset:  132 Size:     4 [unused]
//   float2 u_ScreenResolution;         // Offset:  136 Size:     8 [unused]
//   float u_EdgeLightRate;             // Offset:  144 Size:     4 [unused]
//   float u_ZNear;                     // Offset:  148 Size:     4 [unused]
//   float u_ZNearFar;                  // Offset:  152 Size:     4 [unused]
//   float u_ZRange;                    // Offset:  156 Size:     4 [unused]
//   float4 u_ScreenRect;               // Offset:  160 Size:    16
//   float4 u_ShadowParam;              // Offset:  176 Size:    16 [unused]
//   float3 u_EnvMap_Position;          // Offset:  192 Size:    12 [unused]
//   float u_EnvMap_Radius;             // Offset:  204 Size:     4 [unused]
//   float3 u_Camera_Position;          // Offset:  208 Size:    12 [unused]
//   float u_ZBias;                     // Offset:  220 Size:     4 [unused]
//   float4x4 u_InvViewProjectionMatrix;// Offset:  224 Size:    64 [unused]
//   float4x4 u_ViewProjectionMatrix;   // Offset:  288 Size:    64 [unused]
//   float4x4 u_ProjectionMatrix;       // Offset:  352 Size:    64 [unused]
//   float4x4 u_ViewMatrix;             // Offset:  416 Size:    64 [unused]
//   float2 u_InvScreenResolution;      // Offset:  480 Size:     8 [unused]
//   float2 u_AtmosphereHeight;         // Offset:  488 Size:     8 [unused]
//   float4 u_SkyColorPS;               // Offset:  496 Size:    16 [unused]
//   float u_FogLimit;                  // Offset:  512 Size:     4 [unused]
//   float u_FogHeightDecayIntensity;   // Offset:  516 Size:     4 [unused]
//   float u_ModelReyleighIntensity;    // Offset:  520 Size:     4 [unused]
//   uint u_RenderFlag;                 // Offset:  524 Size:     4 [unused]
//   float4 u_OverrideMaterial;         // Offset:  528 Size:    16 [unused]
//   float u_WaterHeight;               // Offset:  544 Size:     4 [unused]
//   float u_InstanceFadeOffset;        // Offset:  548 Size:     4 [unused]
//   float u_IndirectDiffuseIntensity;  // Offset:  552 Size:     4 [unused]
//   float u_IndirectSpecularIntensity; // Offset:  556 Size:     4 [unused]
//   float u_IndirectSkylightIntensity; // Offset:  560 Size:     4 [unused]
//   float u_EnhanceBrightnessScale;    // Offset:  564 Size:     4 [unused]
//   float u_EnhanceBrightnessPower;    // Offset:  568 Size:     4 [unused]
//   float u_MieNearConstraint;         // Offset:  572 Size:     4 [unused]
//   float u_ModelReyleighNearConstraint;// Offset:  576 Size:     4 [unused]
//   float u_EnlightenAttenStart;       // Offset:  580 Size:     4 [unused]
//   float u_EnlightenAttenEnd;         // Offset:  584 Size:     4 [unused]
//   float u_FarTextureRatioOffset;     // Offset:  588 Size:     4 [unused]
//   float3 u_Protagonist_Position;     // Offset:  592 Size:    12 [unused]
//   float u_Dummy;                     // Offset:  604 Size:     4 [unused]
//   float4 u_SeaScatteringRate;        // Offset:  608 Size:    16 [unused]
//   float u_DebugHair;                 // Offset:  624 Size:     4 [unused]
//   float u_CharacterColorRate;        // Offset:  628 Size:     4 [unused]
//   float u_CharacterColorPow;         // Offset:  632 Size:     4 [unused]
//   float u_CloudCoverage;             // Offset:  636 Size:     4 [unused]
//   float2 u_ScreenRate;               // Offset:  640 Size:     8 [unused]
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim Slot Elements
// ------------------------------ ---------- ------- ----------- ---- --------
// ss0                               sampler      NA          NA    0        1
// ss1                               sampler      NA          NA    1        1
// ss2                               sampler      NA          NA    2        1
// s0                                texture  float4          2d    0        1
// s1                                texture  float4          2d    1        1
// s2                                texture  float4          2d    2        1
// $Globals                          cbuffer      NA          NA    0        1
// EnvironmentPS                     cbuffer      NA          NA    1        1
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Position              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_Target                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb0[1], immediateIndexed
dcl_constantbuffer cb1[11], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_output o0.xyzw
dcl_temps 5
mul_sat r0.x, cb1[0].y, l(0.0166666675)
sample_indexable(texture2d)(float,float,float,float) r0.yz, v1.xyxx, t1.zxyw, s1
mul r0.xy, r0.xxxx, r0.yzyy
dp2 r0.z, r0.xyxx, r0.xyxx
sqrt r0.z, r0.z
lt r0.w, r0.z, l(0.000100)
discard_nz r0.w
sample_indexable(texture2d)(float,float,float,float) r0.w, v1.xyxx, t2.yzwx, s2
sample_indexable(texture2d)(float,float,float,float) r1.xyz, v1.xyxx, t0.xyzw, s0
mad r2.xy, -r0.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), v1.xyxx
max r2.xy, r2.xyxx, cb1[10].xzxx
min r2.xy, r2.xyxx, cb1[10].ywyy
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s2
add r2.zw, r0.wwww, l(0.000000, 0.000000, 0.001000, -0.999000)
ge r0.w, r2.z, r1.w
if_nz r0.w
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r3.xyzx
  mov r0.w, l(2.000000)
else
  mov r0.w, l(1.000000)
endif
mad r2.xy, r0.xyxx, l(-0.375000, -0.375000, 0.000000, 0.000000), v1.xyxx
max r2.xy, r2.xyxx, cb1[10].xzxx
min r2.xy, r2.xyxx, cb1[10].ywyy
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r3.xyzx
  add r0.w, r0.w, l(1.000000)
endif
mad r3.xyzw, r0.xyxy, l(-0.250000, -0.250000, -0.125000, -0.125000), v1.xyxy
max r3.xyzw, r3.xyzw, cb1[10].xzxz
min r3.xyzw, r3.xyzw, cb1[10].ywyw
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r3.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r4.xyzx
  add r0.w, r0.w, l(1.000000)
endif
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.zwzz, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.zwzz, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r3.xyzx
  add r0.w, r0.w, l(1.000000)
endif
max r2.xy, v1.xyxx, cb1[10].xzxx
min r2.xy, r2.xyxx, cb1[10].ywyy
sample_indexable(texture2d)(float,float,float,float) r1.w, r2.xyxx, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r2.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r3.xyzx
  add r0.w, r0.w, l(1.000000)
endif
mad r3.xyzw, r0.xyxy, l(0.125000, 0.125000, 0.250000, 0.250000), v1.xyxy
max r3.xyzw, r3.xyzw, cb1[10].xzxz
min r3.xyzw, r3.xyzw, cb1[10].ywyw
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.xyxx, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r4.xyz, r3.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r4.xyzx
  add r0.w, r0.w, l(1.000000)
endif
sample_indexable(texture2d)(float,float,float,float) r1.w, r3.zwzz, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r3.xyz, r3.zwzz, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r3.xyzx
  add r0.w, r0.w, l(1.000000)
endif
mad r0.xy, r0.xyxx, l(0.375000, 0.375000, 0.000000, 0.000000), v1.xyxx
max r0.xy, r0.xyxx, cb1[10].xzxx
min r0.xy, r0.xyxx, cb1[10].ywyy
sample_indexable(texture2d)(float,float,float,float) r1.w, r0.xyxx, t2.yzwx, s2
ge r1.w, r2.z, r1.w
if_nz r1.w
  sample_indexable(texture2d)(float,float,float,float) r2.xyz, r0.xyxx, t0.xyzw, s0
  add r1.xyz, r1.xyzx, r2.xyzx
  add r0.w, r0.w, l(1.000000)
endif
div o0.xyz, r1.xyzx, r0.wwww
max r0.x, r2.w, l(0.000000)
mul r0.y, r0.z, l(100.000000)
mad r0.x, -r0.x, l(1000.000000), l(1.000000)
mul r0.x, r0.x, r0.y
min r0.x, r0.x, l(1.000000)
mul o0.w, r0.x, cb0[0].x
ret
// Approximately 93 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
